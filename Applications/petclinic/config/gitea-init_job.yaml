apiVersion: batch/v1
kind: Job
metadata:
  name: init-gogs-job
  namespace: cicd
spec:
  template:
    spec:
      serviceAccount: gitea-init
      serviceAccountName: gitea-init
      containers:
      - name: init-gogs
        image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
          - python3
          - -c
          - |
            def petclinic_webhook():
            global result
            if result != '200' or result != 201:
              headers = {'Content-Type': 'application/json'}
              resp = requests.post(url = gitea_url + "/api/v1/repos/" + gitea_user + "/spring-petclinic-config/hooks",
                        headers = headers,
                                  auth = (gitea_user, gitea_pwd),
                                  data = data_webhook)
              result = resp.status_code

#            import os
#            import requests
#            
#            gitea_user = os.popen('oc get gitea gitea -ojsonpath="{.spec.giteaGenerateUserFormat}"').read()
#            gitea_pwd = os.popen('oc get gitea gitea -ojsonpath="{.status.userPassword}"').read()
#            webhookURL = "https://" + os.popen('oc get route webhook -o template --template="{{.spec.host}}"').read()
#            gitea_url = "http://" + os.popen('oc get svc gitea -o template --template="{{.spec.clusterIP}}"').read() + ":3000"
#            # configure webhook on spring-petclinic
#            data_webhook = '{"type": "gogs", "config": { "url": "' + webhookURL + '", "content_type": "json"}, "events": ["push"], "active": true}'
#            
#            petclinic_result = ""
#            while petclinic_result is not 200 or result is not 201:
#              try:
#                global petclinic_result
#                headers = {'Content-Type': 'application/json'}
#                resp = requests.post(url = gitea_url + "/api/v1/repos/" + gitea_user + "/spring-petclinic/hooks",
#                  headers = headers,
#                  auth = (gitea_user, gitea_pwd),
#                  data = data_webhook)
#                petclinic_result = resp.status_code
#              finally:
#                print(str(petclinic_result) + "Configured webhook: " + webhookURL)
#            
#            petclinic_config_result = ""
#            global petclinic_config_result
#            while petclinic_config_result is not 200 or result is not 201:
#              try:
#                headers = {'Content-Type': 'application/json'}
#                resp = requests.post(url = gitea_url + "/api/v1/repos/" + gitea_user + "/spring-petclinic-config/hooks",
#                  headers = headers,
#                  auth = (gitea_user, gitea_pwd),
#                  data = data_webhook)
#                petclinic_config_result = resp.status_code
#              finally:
#                print(str(petclinic_config_result) + "Configured webhook: " + webhookURL)
      restartPolicy: OnFailure