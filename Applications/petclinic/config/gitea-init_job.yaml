#apiVersion: v1
#kind: Pod
#metadata:
#  annotations:
#    argocd.argoproj.io/sync-wave: "4"
#  name: cli-test
#  namespace: cicd
#spec:
#  serviceAccount: gitea-init
#  serviceAccountName: gitea-init
#  securityContext:
#    runAsNonRoot: true
#    seccompProfile:
#      type: RuntimeDefault
#  containers:
#    - name: httpd
#      resources:
#        limits:
#          cpu: 200m
#          memory: 512Mi
#      image: 'image-registry.openshift-image-registry.svc:5000/openshift/cli:latest'
#      command:
#        - /bin/sh
#        - '-ec'
#        - 'while :; do echo ''.''; sleep 5 ; done'
#      securityContext:
#        allowPrivilegeEscalation: false
#        capabilities:
#          drop:
#            - ALL
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "4"
  name: init-gogs-job
  namespace: cicd
spec:
  template:
    spec:
      serviceAccount: gitea-init
      serviceAccountName: gitea-init
      containers:
      - name: init-gogs
        image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
        - /bin/bash
        - '-c'
        - |
          #!/bin/bash
          set -uo pipefail
          OPERATORS=("gitea-operator.gitea-operator")
          INSTANCES=("gitea")
          REPOS=("spring-petclinic" "spring-petclinic-config")
          CHECK_INTERVAL=1
          read -r -d '' OP_CMD <<EOF
          check_csv() {
            oc get operators.operators.coreos.com \$operator -o jsonpath='{.status.components.refs[?(@.kind=="ClusterServiceVersion")].conditions[0].reason}'
          }
          check_instance() {
            oc wait gitea -n cicd \$instance --for=jsonpath='{.status.userSetupComplete}'=true > /dev/null 2>&1
            echo \$?
          }
          write_operator_status() {
            echo "Waiting for operator \$operator, status: \$csv_status"
          }
          write_instance_status() {
            echo "$(date +%H:%M:%S) - Waiting for operator \$instance, status: \$instance_status"
          }
          operator=\${1}
          if [[ -z \$operator ]]; then
            echo "No operator name supplied, aborting"
            exit 2
          fi
          instance=\${2}
          if [[ -z \$instance ]]; then
            echo "No instance name supplied, aborting"
            exit 2
          fi
          check_interval=\${3:-15}
          csv_status="\$(check_csv)"
          if [[ -z "\$csv_status" ]]; then
            echo "$(date +%H:%M:%S) - Waiting for Operator to install"
          else
            while [[ "\$csv_status" != "InstallSucceeded" ]]; do 
              sleep \$check_interval
              csv_status="\$(check_csv)"
              write_operator_status
            done
          fi
          EOF
          for OPERATOR in ${OPERATORS[@]}; do
            timeout 300 bash -c "$OP_CMD" $0 $OPERATOR $CHECK_INTERVAL
          done

          read -r -d '' IN_CMD <<EOF
          check_instance() {
            oc wait gitea -n cicd \$instance --for=jsonpath='{.status.repoMigrationComplete}'=true > /dev/null 2>&1
            echo \$?
          }
          write_instance_status() {
            echo "$(date +%H:%M:%S) - Waiting for operator \$instance, status: \$instance_status"
          }
          instance=\${1}
          if [[ -z \$instance ]]; then
            echo "$(date +%H:%M:%S) - No instance name supplied, aborting"
            exit 2
          fi
          check_interval=\${2:-15}
          instance_status="\$(check_instance)"
          write_instance_status
          while [[ "\$instance_status" != 0 ]]; do
            sleep \$check_interval
            instance_status="\$(check_instance)"
            write_instance_status
          done
          EOF
          for INSTANCE in ${INSTANCES[@]}; do
            timeout 300 bash -c "$IN_CMD" $0 $INSTANCE $CHECK_INTERVAL
          done
          
          read -r -d '' CONFIGURE_WEBHOOK <<EOF
          gitea_user=$(oc get gitea gitea -ojsonpath='{.spec.giteaGenerateUserFormat}')
          gitea_pwd=$(oc get gitea gitea -ojsonpath='{.status.userPassword}')
          webhook_route=$(oc get route webhook -ojsonpath='{.spec.host}')
          gitea_service=$(oc get svc gitea -ojsonpath='{.spec.clusterIP}')
          configure_webhook() {
            curl -XPOST --data '{"type": "gogs", "config": { "url": "https://\${webhook_route}", "content_type": "json"}, "events": ["push"], "active": true}' --header "Content-Type: application/json" --user \${gitea_user}:\${gitea_pwd} --write-out %{http_code} --silent http://\${gitea_service}:3000/api/v1/repos/\${gitea_user}/\${repo}/hooks
          }
          repo=\${1}
          write_webhook_status() {
            echo "$(date +%H:%M:%S) - Waiting for Webhook for \$repo, status: \$configure_webhook"
          }
          check_interval=\${2:-10}
          webhooks_status="\$(configure_webhook)"
          write_webhook_status
          while [[ "\$webhooks_status" != *201 ]]; do
            echo \$webhooks_status
            sleep \$check_interval
            write_webhook_status
          done
          EOF
          for REPO in ${REPOS[@]}; do
            timeout 300 bash -c "$CONFIGURE_WEBHOOK" $0 $REPO $CHECK_INTERVAL
          echo "$(date +%H:%M:%S) - Webhook configured for $REPO"
          done
          echo "$(date +%H:%M:%S) - Gitea configured"
          echo "$(date +%H:%M:%S) - Gitea URL: https://$(oc get route gitea -n cicd -ojsonpath='{.status.ingress[0].host}')"
          echo "$(date +%H:%M:%S) - Gitea credentials: $(oc get gitea gitea -ojsonpath='{.spec.giteaGenerateUserFormat}'):$(oc get gitea gitea -ojsonpath='{.status.userPassword}')"
      restartPolicy: OnFailure