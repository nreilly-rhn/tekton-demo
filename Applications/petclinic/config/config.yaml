apiVersion: v1
kind: ConfigMap
metadata:
  name: maven-settings
  namespace: cicd
data:
  settings.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <settings>
      <servers>
        <server>
          <id>nexus</id>
          <username>admin</username>
          <password>admin123</password>
        </server>
      </servers>
      <mirrors>
        <mirror>
          <id>nexus</id>
          <name>nexus</name>
          <url>http://nexus.cicd.svc:8081/repository/maven-public/</url>
          <mirrorOf>*</mirrorOf>
        </mirror>
      </mirrors>
    </settings>
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: gitea-init
  namespace: cicd
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitea-init-role
  namespace: cicd
rules:
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - pfe.rhpds.com
    resources:
      - gitea
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - route.openshift.io
    resources:
      - routes
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - ''
    resources:
      - services
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitea-init-rolebinding
  namespace: cicd
subjects:
  - kind: ServiceAccount
    name: gitea-init
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitea-init-role
---
apiVersion: batch/v1
kind: Job
metadata:
  Name: init-gogs-job
  namespace: cicd
spec:
  template:
    spec:
      serviceAccount: gitea-init
      serviceAccountName: gitea-init
      containers:
      - name: init-gogs
        image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
          - python3
          - -c
          - |
            import os
            import requests 
            gitea_user = "demo-user"
            gitea_pwd = os.popen('oc get gitea gitea -ojsonpath="{.status.userPassword}"').read()
            webhookURL = "https://" + os.popen('oc get route webhook -o template --template="{{.spec.host}}"').read()
            gitea_url = "http://" + os.popen('oc get svc gitea -o template --template="{{.spec.clusterIP}}"').read() + ":3000"

            # configure webhook on spring-petclinic
            data_webhook = '{"type": "gogs", "config": { "url": "' + webhookURL + '", "content_type": "json"}, "events": ["push"], "active": true}'
            headers = {'Content-Type': 'application/json'}
            resp = requests.post(url = gitea_url + "/api/v1/repos/" + gitea_user + "/spring-petclinic/hooks", 
              headers = headers, 
              auth = (gitea_user, gitea_pwd), 
              data = data_webhook) 
            if resp.status_code != 200 and resp.status_code != 201:
              print("Error configuring the webhook (status code: {})".format(resp.status_code))
              print(resp.content)
            else:
              print("Configured webhook: " + webhookURL)

            # configure webhook on spring-petclinic-config
            data_webhook = '{"type": "gogs", "config": { "url": "' + webhookURL + '", "content_type": "json"}, "events": ["push"], "active": true}'
            headers = {'Content-Type': 'application/json'}
            resp = requests.post(url = gitea_url + "/api/v1/repos/" + gitea_user + "/spring-petclinic-config/hooks", 
              headers = headers, 
              auth = (gitea_user, gitea_pwd), 
              data = data_webhook) 
            if resp.status_code != 200 and resp.status_code != 201:
              print("Error configuring the webhook (status code: {})".format(resp.status_code))
              print(resp.content)
            else:
              print("Configured webhook: " + webhookURL)
      restartPolicy: OnFailure